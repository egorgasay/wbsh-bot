package bot

import (
	api "gopkg.in/telegram-bot-api.v4"
	"text/template"
)

// Group of constants for bot messages
const (
	startMessage = "üëã –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ö–æ—Å–º–æ—Å! \n –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∫—É–ø–∏—Ç—å —Ñ—É—Ç–±–æ–ª–∫—É:)"
	infoMessage  = "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {{ .Avg }} ‚≠êÔ∏è\n"
	itemMessage  = "{{ .Name }} \n{{ .Price }}—Ä.\n{{ .Description }}"
)

// Group of constants for handling messages from user.
const (
	schedule    = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
	start       = "start"
	feedBack    = "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
	sorryHeight = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
	size        = "—Ä–∞–∑–º–µ—Ä"
	items       = "–ü—Ä–µ–¥–º–µ—Ç—ã"
	info        = "info"
)

// itemButtons array of items. Automatically fulfilled from storage when bot starts.
var itemButtons = make([][]api.InlineKeyboardButton, 0)

var (
	allItemsImage = "src/images/allItems.png"
	startImage    = "src/images/ledda.png"
)

// Group of variables that are keyboard buttons.
var (
	startKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", schedule+"::0"),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–û –ë–æ—Ç–µ ‚ÑπÔ∏è", info),
		),
	)

	addressKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", start),
		),
	)

	itemsKeyboard = api.NewInlineKeyboardMarkup()

	scheduleKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ü–Ω", schedule+"::0"),
			api.NewInlineKeyboardButtonData("–í—Ç", schedule+"::1"),
			api.NewInlineKeyboardButtonData("–°—Ä", schedule+"::2"),
			api.NewInlineKeyboardButtonData("–ß—Ç", schedule+"::3"),
			api.NewInlineKeyboardButtonData("–ü—Ç", schedule+"::4"),
		),

		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", start),
		),
	)

	thxFeedbackKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞ –≥–ª–∞–≤–Ω—É—é", start),
		),
	)

	sorryFeedbackKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤", feedBack),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞ –≥–ª–∞–≤–Ω—É—é", start),
		),
	)

	heightKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData(" - 158", sorryHeight),
			api.NewInlineKeyboardButtonData("159 - 170", size+"::S"),
			api.NewInlineKeyboardButtonData("171 - 180", size+"::M"),
			api.NewInlineKeyboardButtonData("181 - 188", size+"::L"),
			api.NewInlineKeyboardButtonData("189 - ", sorryHeight),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData(" - 158", sorryHeight),
		), api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("159 - 170", size+"::S"),
		), api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("171 - 180", size+"::M"),
		), api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("189 - ", sorryHeight),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", start),
		),
	)

	soldKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ üíî", items),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", items),
		),
	)

	buyKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ö—É–ø–∏—Ç—å üõí", items),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", start),
		),
	)

	infoKeyboard = api.NewInlineKeyboardMarkup(
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí´", feedBack),
		),
		api.NewInlineKeyboardRow(
			api.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", start),
		),
	)
)

// Group of templates for messages.
var (
	itemTemplate = template.Must(template.New("items").Parse(itemMessage))
	infoTemplate = template.Must(template.New("info").Parse(infoMessage))
)
